class_<BinnedPdf>(m, "BinnedPdf", base<Pdf>())
.def(init<>())
.def(init<AxisCollection>())
.def(init<Histogram>())
.def("__call__", &BinnedPdf::operator())
.def("probability", &BinnedPdf::Probability)
.def("integral", &BinnedPdf::Integral)
.def("normalise", &BinnedPdf::Normalise)
.def("clone", &BinnedPdf::Clone) // CHECKME: pointer to member
.def("fill", (void (BinnedPdf::*)(const std::vector<double>&, double)) &BinnedPdf::Fill, arg("vals_"), arg("weight_") = 1)
.def("fill", (void (BinnedPdf::*)(const EventData&, double)) &BinnedPdf::Fill, arg("data_"), arg("weight_") = 1)
.def("fill", (void (BinnedPdf::*)(double, double)) &BinnedPdf::Fill, arg("val_"), arg("weight_") = 1)
.def("find_bin", (size_t (BinnedPdf::*)(const std::vector<double>&) const) &BinnedPdf::FindBin)
.def("find_bin", (size_t (BinnedPdf::*)(const EventData&) const) &BinnedPdf::FindBin)
.def("unpack_indices", &BinnedPdf::UnpackIndices)
.def("flatten_indices", &BinnedPdf::FlattenIndices)
.def("get_axes", &BinnedPdf::GetAxes, return_value_policy::reference_internal)
.def("set_axes", &BinnedPdf::SetAxes)
.def("get_bin_contents", &BinnedPdf::GetBinContents)
.def("set_bin_contents", &BinnedPdf::SetBinContents)
.def("means", &BinnedPdf::Means)
.def("variances", &BinnedPdf::Variances)
.def("get_histogram", &BinnedPdf::GetHistogram, return_value_policy::reference_internal)
.def("set_histogram", &BinnedPdf::SetHistogram)
.def("get_bin_content", &BinnedPdf::GetBinContent)
.def("get_n_bins", &BinnedPdf::GetNBins)
.def("add_bin_content", &BinnedPdf::AddBinContent)
.def("set_bin_content", &BinnedPdf::SetBinContent)
.def("empty", &BinnedPdf::Empty)
.def("get_n_dims", &BinnedPdf::GetNDims)
.def("marginalise", (BinnedPdf (BinnedPdf::*)(const std::vector<size_t>&) const) &BinnedPdf::Marginalise)
.def("marginalise", (BinnedPdf (BinnedPdf::*)(size_t) const) &BinnedPdf::Marginalise)
.def("set_data_rep", &BinnedPdf::SetDataRep)
.def("get_data_rep", &BinnedPdf::GetDataRep);
